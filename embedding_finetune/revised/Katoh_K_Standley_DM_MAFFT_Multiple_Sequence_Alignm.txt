Katoh K, Standley DM. MAFFT Multiple Sequence Alignment Software Version 7: Improvements in performance and usability. Mol Biol Evol 30: 772-780. Article in Molecular Biology and Evolution, January 2013. DOI: 10.1093/molbev/mst010. Source: PubMed.
We report a major update of the MAFFT multiple sequence alignment program. This version introduces several new features, including options for adding unaligned sequences into an existing alignment, adjusting the direction of nucleotide alignment, performing constrained alignments, and utilizing parallel processing. These features were implemented following the previous major update. This report provides actual examples to illustrate how these features operate, both individually and in combination. Additionally, some examples of sequences incorrectly aligned by MAFFT are presented to highlight its limitations. We discuss strategies to avoid misalignments and our ongoing efforts to address these challenges.
Key Words: multiple sequence alignment, metagenome, protein structure, progressive alignment, parallel processing.
Multiple sequence alignment (MSA) plays a crucial role in the evolutionary analysis of biological sequences. MAFFT is an MSA program first released in 2002 (Katoh et al. 2002). Due to its high performance (Nuin et al. 2006; Golubchik et al. 2007; Dessimoz and Gil 2010; Letsch et al. 2010; Sahraeian and Yoon 2011; Sievers et al. 2011), MAFFT has gained popularity in recent years. Following the review of the previous version (version 6) by Katoh and Toh (2008b), we have continuously enhanced its accuracy, speed, and utility in practical applications. These improvements and techniques have been documented in various papers (Katoh et al. 2009; Katoh and Toh 2010; Katoh and Frith 2012; Katoh and Standley 2013).
In this report, we demonstrate the various types of analyses that can be performed with the new features, both individually and in combination, using realistic examples. We also discuss the limitations of the current version by presenting instances of sequences that were incorrectly aligned by MAFFT, and outline our ongoing efforts to mitigate these limitations.
All options in MAFFT assume that the input sequences are homologous, meaning they are derived from a common ancestor during evolution. Consequently, all characters in the input data are aligned. The software does not account for genomic rearrangements or domain shuffling, ensuring that the order of characters in each sequence is preserved, although sequences can be reordered based on similarity. Most MAFFT options presume that nearly all pairs in the input sequences can be aligned, either locally or globally, which introduces a tradeoff between accuracy and speed. For instance, the PartTree option (Katoh and Toh 2007) is a quick but less precise method, while L-INS-i and G-INS-i are slower yet more accurate. RNA structural alignment methods are typically more accurate but computationally more demanding due to additional calculations required.
Feel free to let me know if you need any more adjustments!
In particular, the new options to add sequences into an existing alignment, as listed in Table 1, require careful consideration of this tradeoff, as discussed later. MAFFT version 7 offers various alignment strategies, including progressive methods (PartTree, FFT-NS-1, and L-INS-1) (Katoh and Frith 2012; Feng and Doolittle 1987; Higgins and Sharp 1988; Katoh and Toh 2007), iterative refinement methods (FFT-NS-i, L-INS-i, E-INS-i, and G-INS-i) (Barton and Sternberg 1987; Berger and Munson 1991; Gotoh 1993; Katoh et al. 2005), and structural alignment methods for RNAs (Q-INS-i and X-INS-i; Katoh and Toh 2008a). For details of these strategies, see Katoh and Toh (2008b).
According to a recent comparative study based on the MetAl metric (Blackburne and Whelan 2012a, 2012b), there are two significantly different classes of multiple sequence alignment (MSA) methods: similarity-based and profile-based methods. MAFFT has a subprogram, mafft-profile, to align two existing alignments. This method separately converts the first alignment (alignment1) and the second alignment (alignment2) into profiles and then aligns the two profiles. This means that the two input alignments are assumed to be phylogenetically isolated from each other, as shown in Figure 1A. Careless application of this method can result in serious misalignments, as discussed in a later section.
MAFFT version 7 also includes an alternative option, —addprofile, which is safer against misuses. This option accepts two existing alignments, alignment1 and alignment2, and assumes a phylogenetic relationship shown in Figure 1B. Specifically, alignment1 is assumed to form a monophyletic cluster, while alignment2 is not necessarily a monophyletic cluster. The cluster of alignment1 can be placed in any phylogenetic position within the tree of alignment2. Moreover, this option checks whether alignment1 forms a monophyletic cluster; if not, it returns an error message, advising the user to use the —add option (see the following section).
Advances in sequencing technologies have increased the need for MSAs consisting of a larger number of sequences. Several approaches enable the construction of large MSAs, including rapid algorithms and parallelization. Here, we describe an alternative approach: the use of an existing alignment. There are databases of carefully aligned and annotated sequences (Cole et al. 2009; Sigrist et al. 2010; Punta et al. 2012), where each MSA typically consists of a small number of sequences (usually up to 1,000). These existing MSAs can serve as a backbone for building a larger MSA that incorporates newly sequenced data. This method is more efficient than reconstructing the entire MSA from a set of ungapped sequences. Additionally, this approach is relatively robust against low-quality sequences that may result from sequencing errors, misassemblies, and other factors. Such noise often negatively impacts the quality of an MSA, but using established alignments can help mitigate these issues.
The MAFFT profile program is not suitable for certain applications. There are two types of misapplications to consider. The first type involves the following steps: 1) convert an existing alignment to a profile, 2) align new sequences and convert them to a profile, and 3) align the two profiles. This procedure is inappropriate for adding new sequences because it assumes a phylogenetic relationship, as illustrated in Figure 1A.
The second type of misapplication involves: 1) converting the existing alignment to a profile, 2) separately aligning each new sequence to the profile of the existing alignment, and 3) constructing a full alignment from the individual alignments computed in the previous step. While this approach is more reasonable than the first, it still presents problems because the phylogenetic positions of new sequences are assumed at the root of the tree, as illustrated in Figure 1C. Results of this procedure for two cases are shown in Table 2 and Figure 2.
To address the limitations of profile alignment, we implemented an option called —add in 2010, allowing the addition of unaligned sequences to an existing multiple sequence alignment (MSA). This option assumes that each new sequence is derived from a branch in the tree of an existing alignment, as illustrated in Figure 1D. The —add option works similarly to the standard progressive method, except that the alignment calculation is skipped at the nodes whose children are all part of the existing alignment.
Figure 2 illustrates ITS alignments using different options of MAFFT, displayed on Jalview (Waterhouse et al. 2009). Panels (A) and (B) show incorrect alignments produced by the FFT-NS-2 and L-INS-i algorithms, respectively. Panel (C) depicts an incorrect alignment made with mafft-profile. Here, the full-length sequences were aligned using the L-INS-i algorithm, and each new sequence was subsequently added to this alignment using mafft-profile. Panel (D) presents a more reasonable alignment achieved through a two-step strategy, utilizing the —6merpair and —addfragments option in the second step. Panel (E) is a reordered version of (D), with sequences arranged such that similar sequences are grouped closely. All calculations were performed using 16 cores on a Linux PC with a 2.67GHz Intel Xeon E7-8837 and 256 GB RAM.
With the rise of second-generation sequencers, aligning short reads to an existing alignment has become necessary. Several tools (Berger and Stamatakis 2011; Löytynoja et al. 2012; Sun and Buhler 2012) for this purpose were developed between 2011 and 2012. A limitation of the —add option in MAFFT for this purpose was highlighted by Löytynoja et al. (2012). Consequently, we introduced a new option, —addfragments, which does not take into account the relationships among the sequences being added. Details of the —add and —addfragments options are described in Katoh and Frith (2012).
In this section, we examine how the —addfragments option functions using a real case. Internal transcribed spacers (ITSs) are regions located between structural ribosomal RNAs. The structure of the rDNA region in a eukaryotic genome follows the order: 18S, ITS1, 5.8S, ITS2, 28S. We use a dataset consisting of ITS1 and ITS2 sequences obtained from environmental samples (Chen W, personal communication). Each sequence contains either the ITS1 or ITS2 region, extracted from 454 pyrosequencing data using the Fungal ITS extractor (Nilsson et al. 2010). Additionally, several fungal genomic sequences that encompass the full ITS1 + 5.8S rRNA + ITS2 regions are available in public databases.
In a scenario requiring an MSA of approximately 300 full-length sequences alongside around 5,000 ITS1 or ITS2 sequences, one potential solution is to build the entire MSA at once. However, the result from the default option (FFT-NS-2) of MAFFT is evidently incorrect, as demonstrated in Figure 2A. The ITS1 and ITS2 regions are improperly forced into alignment.
Table 2 presents a comparison of different options using the 16S.B.ALL dataset (Mirarab et al. 2012).
Mafft 6merpair add fragments frags existing msa 0.9949 3.76h 36.2min. Mafft localpair add frags existing msa 0.9707 23.4 days b 2.43 days b.
Mafft 6merpair add frags existing msa 0.9604 1.32h 1.44h.
Profile alignment 0.2779 15.5h 1.60h.
Case 2: Mafft 6merpair add fragments frags existing msa 0.9969 4.54h 33.8min.
Case 3: Mafft 6merpair add fragments frags existing msa 0.9949 1.79 days 5.91h.
NOTE: The estimated alignments were compared with the CRW alignment to measure accuracy (the number of correctly aligned letters/the number of aligned letters in the CRW alignment). Calculations were performed on a Linux PC with a 2.67GHz Intel Xeon E7-8837/256 GB RAM (for the case marked with superscript b), or on a Linux PC with a 3.47GHz Intel Xeon X5690/48 GB RAM (for the other cases).
Case 3: 13,822 sequences in the existing alignment, 138,210 fragments.
a) Wall-clock time with 10 cores. Command-line argument for parallel processing is —thread 10.
b) Full command-line options are as follows: mafft —localpair —weighti 0 —add frags existing msa.
Even if a more computationally expensive (and usually more accurate) method, L-INS-i, is applied (CPU time = 98h), the alignment is still obviously incorrect (see Fig. 2B).
Two-step strategies can solve this type of problem. First, a set of full-length sequences taken from databases is aligned to build a backbone MSA, and then the new ITS1 and ITS2 sequences are added into this backbone MSA using the —addfragments option.
In this case, Dynamic Programming (DP) is used to compare the distances between every new sequence and every sequence in the backbone MSA (—multipair is selected by default).
Here, distances are rapidly estimated using the number of shared 6mers, instead of DP.
The result of the latter option (—6merpair —addfragments) is shown in Figures 2D and E. The difference between D and E lies in the order of sequences; the sequences were reordered according to similarity using the —reorder option in E. In this alignment, ITS1 and ITS2 are clearly separated and aligned to appropriate positions in the full-length alignment. Moreover, this strategy is computationally much less expensive (CPU time = 15 min [first step] + 1.5 min [second step]) than the full application of L-INS-i (CPU time = 98h). The former option (—multipair —addfragments) also returns a similar result to the latter (—6merpair) but is slower (CPU time = 48.6 min [second step]).
This case suggests that selecting a strategy appropriate to the problem of interest is crucial. The most time-consuming method, L-INS-i, is not always the most accurate one. The difficulty of this problem for standard approaches arises from the fact that ITS1 sequences and ITS2 sequences are not homologous to each other, making most pairwise alignments impossible. Due to these non-homologous pairs, the distance matrix used for guide tree calculation is not additive; the distances between ITS1 and full-length sequences, and those between ITS2 and full-length sequences are close to zero, whereas the distances between ITS1 and ITS2 are quite large. In this situation, it is difficult for normal distance-based tree-building methods to yield a reasonable tree. Additionally, during the alignment step, the objective function of L-INS-i is affected by inappropriate pairwise alignment scores between ITS1 and ITS2. Such issues can be avoided by simply ignoring the relationship between ITS1 and ITS2, as done in the —addfragments option.
Another case is the 16S.B.ALL dataset by Mirarab et al. (2012). It consists of a multiple sequence alignment (MSA) of 13,822 bacterial SSU rRNA sequences taken from the Gutell Comparative RNA Website (CRW) (Cannone et al. 2002), along with 138,210 fragmentary sequences that were originally included in the CRW alignment but are ungapped and artificially truncated. In Katoh and Standley (2013), we used a subset of 13,821 fragmentary sequences prepared by Mirarab et al. (2012). Here, we utilize the full dataset of 138,210 fragmentary sequences to examine scalability. This scenario assumes that we already have a manually curated (or backbone) MSA and a newly determined set of many fragmentary sequences from a metagenomics project, necessitating a complete MSA of these sequences.
The first four lines in Table 2 (case 1) present the performances of various options for this analysis, using a relatively small dataset (13,822 sequences in the existing alignment and 13,821 fragments). The accuracy of each resulting MSA was evaluated by comparing it with the original CRW alignment. CPU time and wall-clock time for each method are also listed. Given the high conservation of the sequences in this dataset, the difference in accuracy between the default option (—-multipair —addfragments) and the faster option (—-6merpair —addfragments) is minimal.
Once again, the trade-off between accuracy and speed does not apply here. The application of a computationally expensive method based on L-INS-1 (—-localpair —add) does not offer any advantage, as the extra computational time is spent comparing non-overlapping fragmentary sequences, which do not yield reasonable solutions.
The profile alignment line in Table 2 illustrates results from a second type of misuse of profile alignment, where the provided alignment is converted to a profile and each new sequence is aligned separately to that profile. This result clearly indicates that using profile alignment must be avoided in this case as well. Users need not be overly concerned about this misuse since this calculation is disabled in MAFFT unless the user modifies the code or writes a wrapper script.
The last two lines in Table 2 (Cases 2 and 3) display the performance of the fast option (—-6merpair —addfragments) for a larger number (138,210) of fragmentary sequences. The existing alignment contains 1,000 sequences in Case 2 and 13,822 in Case 3. This fast option provides a reasonable quality of results within a reasonable computation time. Currently, the default option (—-multipair —addfragments) cannot manage Cases 2 and 3. Simulation-based benchmarks in Katoh and Frith (2012) suggested that, for cases with more divergent sequences, the accuracy of the default option is superior to that of the fast option. We are actively working to enhance the scalability of the default option.
MAFFT version 7 includes an option for parallel processing, —-thread (Katoh and Toh 2010). This feature is currently supported on Mac OS X and Linux, but not yet on Windows due to technical reasons. With the —-thread n option, the program runs in parallel using n threads. The number of threads can be automatically determined with —-thread —1, which sets the number of threads to match the number of physical cores, not the number of logical cores in Intel's hyperthreaded CPUs.
For progressive methods, the results from the multithreaded version are identical to those of the serial processing version. However, for iterative refinement methods, the results may differ. We confirmed that the accuracy of the parallel version in these cases is comparable to that of the serial version (Katoh and Toh 2010). The efficiency of parallelization depends on the alignment strategy. In the case of the —-addfragments option, the efficiency is acceptably high, as demonstrated in Table 2.
MAFFT version 7 also offers several enhanced options for peripheral functions.
MAFFT cannot handle more complicated sequences with genomic rearrangements, such as translocations, duplications, or inversions. The web version of MAFFT displays dot plots between the first sequence and the remaining sequences, using the LAST local alignment program (Kielbasa et al. 2011), for every nucleotide alignment run. By viewing the dot plots, users can easily check for genomic rearrangements and the directions of input sequences. For further details and an example, see Katoh and Standley (2013).
—anysymbol: If the input data include unusual letters, such as U or J (in the case of protein data), MAFFT stops by default. The —anysymbol option allows these letters and non-alphabetical characters.
—preservecase: By default, amino acid sequences are converted to upper case, while nucleotide sequences are converted to lower case. This behavior can be changed by using the —preservecase option.
—reorder: The order of sequences is the same as the input sequences by default, but they can be sorted according to similarity to each other by using the —reorder option.
—phylipout and —clustalout: The output format is multi-fasta by default, but the Phylip (interleaved) format and the Clustal format can also be selected.
Users can check the guide tree by using the —treeout option. In the case of —addfragments, the estimated phylogenetic positions of new sequences are displayed alongside the estimated tree of the existing alignment. The alignment calculation is performed based on this phylogenetic estimation. It is also possible to compute such phylogenetic information only, without alignment, by using the —retree 0 option. An example of output is shown in Figure 3A.
Figure 3A: A part of the output from the —treeout option shows the phylogenetic positions of new sequences (new#) within the tree of the existing alignment (backbone#), estimated before the alignment calculation. This file also includes a Newick format tree of the existing alignment (not shown in this figure). For each new sequence, the nearest sequence in the existing alignment (nearest sequence), the approximate distance to the nearest sequence (approximate distance), and the members of the sister group (sister group) are indicated. Figure 3B provides a graphical representation of this data.
Note that this phylogenetic information is roughly estimated before the MSA calculation, not based on the MSA itself. Especially with the fast option, —6merpair, the estimation can be very rough. The —multipair option (default) provides a better estimation, though it requires a relatively long computational time. For more rigorous estimation of the phylogenetic positions of new sequences, specially designed tools such as pplacer (Matsen et al. 2010), PaPaRa (Berger and Stamatakis 2011), PAGAN (Lo‹ytynoja et al. 2012), and SEPP (Mirarab et al. 2012), or combinations of these, including MAFFT, should be considered.
The method is suitable for aligning distantly related sequences. We selected default parameters based on the expectation that if the program works well for difficult (distantly related) cases, it should also perform well for easier cases. However, further studies using actual sequence data will be necessary before implementing extensions such as using different scoring matrices and gap penalties based on the divergence level, similar to ClustalW (Thompson et al. 1994). It remains unclear whether this expectation holds true in all scenarios. For instance, a benchmark using simulated protein sequences (Lo‹ytynoja et al. 2012), generated by INDELiBLE (Fletcher and Yang 2009), showed that employing a more stringent scoring matrix, JTT 1PAM (Jones et al. 1992), with weaker gap penalties than the defaults, significantly improved benchmark scores. Despite this, default parameters were consistently used in the benchmark by Katoh and Frith (2012), as arbitrary adjustments do not seem sensible.
We have discussed potential improvements in multiple sequence alignments (MSAs) of closely related sequences earlier. However, MSAs of distantly related sequences remain a challenging problem.
allows for the incorporation of highly confident parts of the alignment into MAFFT to seed the MSA calculation. In the case of the three PIN-domain-containing structures shown in Figure 4, structural alignments for the three unique pairs (ash_3v33A-2qipA, ash_3v33A-1taqA, and ash_2qipA-1taqA) can be computed, allowing further refinement of the MSA.
In this section, we focus on a crucial feature of ASH: the equivalence score, which is used to define structural similarity.
Due to the low sequence identities between the aligned structures, we observe an improvement in the resulting Multiple Sequence Alignment (MSA) compared to conventional MAFFT (see Fig. 4). Building on this approach, we are developing an integrative service for protein structure-informed MSA construction.
The authors thank Drs. Wen Chen, C. André Lévesque, and Christopher Lewis from Agriculture and Agri-Food Canada for allowing the use of the ITS data in this article and for providing other challenging problems. This work was supported by the Platform for Drug Discovery, Informatics, and Structural Life Science from the Ministry of Education, Culture, Sports, Science and Technology, Japan, and the Computational Biology Research Center, National Institute of Advanced Industrial Science and Technology (AIST), Japan.
Katoh K, Toh H. 2008a. Improved accuracy of multiple ncRNA alignment by incorporating structural information into a MAFFT-based sequence alignment program. Brief Bioinform. 9:286–298.
Katoh K, Toh H. 2010. Parallelization of the MAFFT multiple sequence alignment program. Bioinformatics 26:1899–1900.
Kielbasa SM, Wan R, Sato K, Horton P, Frith MC. 2011. Adaptive seeds for genomic sequence comparison. Genome Res. 21:487–493.
Altschul SF. 1998. Generalized affine gap costs for protein sequence alignment. Proteins 32:88–96.
Barton GJ, Sternberg MJ. 1987. A strategy for the rapid multiple alignment of protein sequences. Confidence levels from tertiary structure comparisons. J Mol Biol. 198:327–337.
Berger MP, Munson PJ. 1991. A novel randomized iterative strategy for aligning multiple protein sequences. Comput Appl Biosci. 7:479–484.
Berger SA, Stamatakis A. 2011. Aligning short reads to reference alignments and trees. Bioinformatics 27:2068–2075.
Matsen FA, Kodner RB, Armbrust EV. 2010. pplacer: linear time maximum-likelihood and Bayesian phylogenetic placement of sequences onto a fixed reference tree. BMC Bioinformatics 11:538.
Mirarab S, Nguyen N, Warnow T. 2012. SEPP: SATe-enabled phylogenetic placement. Pac Symp Biocomput. 17:247–258.
Cannone JJ, Subramanian S, Schnare MN, et al. (14 co-authors). 2002. The comparative RNA web (CRW) site: an online database of comparative sequence and structure information for ribosomal, intron, and other RNAs. BMC Bioinformatics 3:2.
Kristiansson E, Ryberg M, Jumpponen A, Abarenkov K. 2010. An open source software package for automated extraction of ITS1 and ITS2 from fungal ITS sequences for use in high-throughput community assays and molecular ecology. Fungal Ecology 3:284–287.
Cole JR, Wang Q, Cardenas E, et al. (11 co-authors). 2009. The ribosomal database project: improved alignments and new tools for rRNA.
O'Sullivan O, Suhre K, Abergel C, Higgins DG, Notredame C. 2004. Progressive sequence alignment as a prerequisite to correct phylogenetic trees. J Mol Evol. 25:351–360.
Feng DF, Doolittle RF. 1987. 3DCoffee: combining protein sequences and structures within multiple sequence alignments. J Mol Biol. 340:385–395.
Fletcher W, Yang Z. 2009. INDELible: a flexible simulator of biological sequence evolution. Mol Biol Evol. 26:1879–1888.
Pei J, Kim BH, Grishin NV. 2008. PROMALS3D: a tool for multiple protein sequence and structure alignments. Nucleic Acids Res. 36:2295–2300.
Golubchik T, Wise MJ, Easteal S, Jermiin LS. 2007. Mind the gaps: evidence of bias in estimates of multiple sequence alignments. Mol Biol Evol. 24:2433–2442.
Gotoh O. 1993. Optimal alignment between groups of sequences and its application to multiple sequence alignment. Comput Appl Biosci. 9:361–370.
Gotoh O. 1995. A weighting system and algorithm for aligning many phylogenetically related sequences. Comput Appl Biosci. 11:543–551.
Henikoff S, Henikoff JG. 1992. Amino acid substitution matrices from protein blocks. Proc Natl Acad Sci U S A. 89:10915–10919.
Higgins DG, Sharp PM. 1988. CLUSTAL: a package for performing multiple sequence alignment on a microcomputer. Gene. 73:237–244.
Sigrist CJ, Cerutti L, de Castro E, Langendijk-Genevaux PS, Bulliard V, Jones DT, Taylor WR, Thornton JM. 1992. The rapid generation of mutation data matrices from protein sequences. Comput Appl Biosci. 8:197–203.
Jones DT, Taylor WR, Thornton JM. 1994. A mutation data matrix for transmembrane proteins. FEBS Lett. 339:269–275.
Katoh K, Asimenos G, Toh H. 2009. Multiple alignment of DNA sequences with MAFFT. Methods Mol Biol. 537:39–64.
Katoh K, Frith MC. 2012. Adding unaligned sequences into an existing alignment using MAFFT and LAST. Bioinformatics. 28:3144–3146.
Katoh K, Kuma K, Toh H, Miyata T. 2005. MAFFT version 5: improvement in accuracy of multiple sequence alignment. Nucleic Acids Res. 33:511–518.
Katoh K, Misawa K, Kuma K, Miyata T. 2002. MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform. Nucleic Acids Res. 30:3059–3066.
Katoh K, Standley DM. Forthcoming 2013. MAFFT: iterative refinement and additional methods. Methods Mol Biol. 22:4673–4680.
Katoh K, Toh H. 2007. PartTree: An algorithm to build an approximate tree for large sequences.
Waterhouse AM, Procter JB, Martin DM, Clamp M, Barton GJ. 2009. Bioinformatics.
It looks like you've shared a brief snippet. If you have a longer context or additional text that needs revision, please paste it here, and I'll help you refine it!

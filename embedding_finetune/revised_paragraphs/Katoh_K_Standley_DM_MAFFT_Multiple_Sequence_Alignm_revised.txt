We report a major update of the MAFFT multiple sequence alignment program. This version includes several new features, such as options for adding unaligned sequences into an existing alignment, adjusting the direction in nucleotide alignment, constrained alignment, and parallel processing, all implemented since the previous major update. This report provides actual examples to demonstrate how these features function, both individually and in combination. Additionally, some examples of incorrect alignments produced by MAFFT are included to illustrate its limitations. We discuss strategies to avoid misalignments and our ongoing efforts to address these challenges.
Key words: multiple sequence alignment, metagenome, protein structure, progressive alignment, parallel processing.
Multiple sequence alignment (MSA) plays an important role in evolutionary analyses of biological sequences. MAFFT is an MSA program, first released in 2002. Because of its high performance, MAFFT has become increasingly popular in recent years. After reviewing the previous version (version 6), continuous improvements in accuracy, speed, and utility have been made. These enhancements have been reported in various papers. In this report, we demonstrate the different types of analyses achievable with the new features, both individually and in combination, using realistic examples. We also discuss the limitations of the current version by providing examples of sequences incorrectly aligned by MAFFT and describe ongoing efforts to address these limitations.
Basic Concepts and Usage
MAFFT version 7 has options for various alignment strategies, including progressive methods, iterative refinement methods, and structural alignment methods for RNAs. A recent comparative study based on the MetAl metric identified two significantly different classes of MSA methods: similarity-based methods and evolution-based methods. MAFFT is classified as a similarity-based method. However, evolutionary information is valuable for similarity-based methods since the sequences to be aligned have evolved from a common ancestor. In this regard, MAFFT takes evolutionary information into account. All options in MAFFT assume that the input sequences are homologous, meaning they descend from a common ancestor, thereby aligning all characters in the input data. Genomic rearrangement or domain shuffling is not assumed; thus, the order of letters in each sequence is preserved, although sequences may be reordered based on similarity. Most options in MAFFT assume that nearly all pairs in the input sequences can be aligned, either locally or globally. In such cases, a tradeoff between accuracy and speed exists. For instance, the PartTree option is a fast but rough method, while L-INS-i and G-INS-i are slower yet more accurate. RNA structural alignment methods are generally more accurate and computationally expensive due to the additional calculations required. However, this tradeoff is not always consistent, particularly with the new options to add sequences into an existing alignment, which necessitate careful consideration of this tradeoff.
Profile Alignments
MAFFT includes a subprogram, mafft-profile, to align two existing alignments. The command for this function is:
mafft-profile alignment1 alignment2 > output
mafft-profile alignment1 alignment2 > output
This method separately converts alignment1 and alignment2 to profiles and then aligns the two profiles. It means that the two input alignments are assumed to be independent.
For large-scale alignment, the command options for MAFFT Version 7 include progressive methods with the PartTree algorithm. The commands are as follows:
For medium-scale alignment, the options include:
For small-scale alignment, the iterative refinement methods available are:
If unsure which option to use, the Automatic MAFFT command selects an appropriate option based on the size of the input data.
For small-scale RNA alignment, structural alignment methods include:
To add new sequences into an existing multiple sequence alignment (MSA), the following commands are available:
Parameter options include scoring matrices for protein alignment and the Kimura score matrix for nucleotide alignment.
As a result of advances in sequencing technologies, we increasingly need multiple sequence alignments (MSAs) consisting of a larger number of sequences. There are several different approaches to enable the construction of large MSAs, such as rapid algorithms and parallelization. Here, we describe an alternate approach: the use of an existing alignment. Databases of carefully aligned and annotated sequences already exist, in which each MSA consists of a small number (typically up to 1,000) of sequences. We can use such MSAs as a backbone to build a larger MSA containing newly sequenced data. This method is more efficient than rebuilding the entire MSA from a set of ungapped sequences. Moreover, this approach is relatively robust against low-quality sequences resulting from sequencing errors, misassemblies, and other factors. Such noise usually has a negative effect on the quality of an MSA, but there are situations where biologically important information is contained in low-quality sequences. In such cases, we first select highly reliable sequences to build a backbone MSA, and then add the other sequences, including low-quality ones, into the MSA. As a result, the quality of the final MSA is less affected by the low-quality sequences.
The MAFFT-profile program is not useful for this purpose, as there are two types of misapplications. The first involves: 1) converting an existing alignment to a profile, 2) aligning new sequences and converting them to a profile, and 3) aligning the two profiles. This procedure is inappropriate for adding new sequences because it assumes a phylogenetic relationship. The second misapplication involves: 1) converting the existing alignment to a profile, 2) separately aligning each new sequence to the profile of the existing alignment, and 3) constructing a full alignment from the individual alignments computed in the previous step. This approach is more reasonable than the first one but still problematic, as the phylogenetic positions of new sequences are assumed at the root of the tree.
The methods outlined above illustrate the importance of careful application when utilizing profile alignment to ensure accurate MSAs.
To overcome the limitation of profile alignment, in 2010, we implemented an option, ––add, to add unaligned sequences to an existing multiple sequence alignment (MSA). This option assumes that each new sequence was derived from a branch in the tree of an existing alignment. This option works almost identically to the standard progressive method, except that the alignment calculation is skipped at the nodes whose children are all in the existing alignment.
Along with the popularization of second-generation sequencers, there is often a need to align short reads to an existing alignment. Several tools for this purpose were developed between 2011 and 2012. A limitation of the ––add option in MAFFT for this purpose was pointed out in previous research. Thus, we implemented a new option, ––addfragments, which does not consider the relationship among the sequences to be added. Details of the ––add and ––addfragments options are described in further literature.
In this section, we discuss how the ––addfragments option works using an actual case. Internal transcribed spacers (ITSs) are regions located between structural ribosomal RNAs. The structure of the ribosomal DNA (rDNA) region in a eukaryotic genome is organized as 18S–ITS1–5.8S–ITS2–28S. We use a dataset consisting of ITS1 and ITS2 sequences obtained from environmental samples. Each sequence has either the ITS1 or ITS2 region only, extracted from 454 pyrosequencing data using FungalITSextractor. Additionally, several fungal genomic sequences that fully cover ITS1, 5.8S rRNA, and ITS2 are available from public databases.
Suppose we need an MSA of approximately 300 full-length sequences and about 5,000 ITS1 or ITS2 sequences. One possible solution is to build an entire MSA at once. The result of the default option (FFT-NS-2) of MAFFT is incorrect. ITS1 and ITS2 regions are forced to be aligned to each other. Even if a more computationally expensive method, L-INS-i, is applied, the alignment remains incorrect. Two-step strategies can solve this type of problem: first, a set of full-length sequences taken from databases is aligned to build a backbone MSA, and then the new ITS1 and ITS2 sequences are added into this backbone MSA using the ––addfragments option.
The process can be summarized in two steps: Step 1 involves aligning the full-length sequences to create a backbone MSA, and Step 2 consists of adding the new sequences into the backbone MSA. The second command is equivalent to using Dynamic Programming to compare the distances between every new sequence and every sequence in the backbone MSA.
mafft --6merpair --addfragments new_sequences backbone_msa > output, where distances are rapidly estimated using the number of shared 6mers, instead of dynamic programming (DP). The result of this option (––6merpair ––addfragments) is shown in figures 2D and 2E. The difference between D and E lies in the order of sequences; the sequences were reordered according to similarity using the ––reorder option in E. In this alignment, ITS1 and ITS2 are clearly separated and aligned to their appropriate positions in the full-length alignment. Moreover, this strategy is computationally much less expensive (CPU time = 15 min [first step] + 1.5 min [second step]) than the full application of L-INS-i (CPU time = 98 h). The former option (––multipair ––addfragments) also yields a similar result to the latter (––6merpair) but is slower (CPU time = 48.6 min [second step]). This indicates that it is crucial to select a strategy appropriate to the specific problem at hand. The most time-consuming method, L-INS-i, is not always the most accurate. The challenge for standard approaches arises from the fact that ITS1 sequences and ITS2 sequences are not homologous, making most pairwise alignments impossible. Due to these nonhomologous pairs, the distance matrix used for the guide tree calculation is not additive; the distances between ITS1 and full-length sequences and those between ITS2 and full-length sequences are close to zero, while the distances between ITS1 and ITS2 are considerably large. In this context, it is difficult for normal distance-based tree-building methods to produce a reasonable tree. Furthermore, during the alignment step, the objective function of L-INS-i is influenced by inappropriate pairwise alignment scores between ITS1 and ITS2. These issues can be avoided by disregarding the relationship between ITS1 and ITS2, as done in the ––addfragments option. Additionally, a result of the second type of misuse of mafft-profile (discussed earlier) is illustrated in figure 2C. Some new sequences are correctly aligned, but others are clearly misaligned (note that the order of sequences in figure 2C is identical to that in figure 2D). These misalignments are attributed to an incorrect assumption regarding the phylogenetic placement of new sequences shown in figure 1C.
Test Case 2: Bacterial SSU rRNA
Another case involves the 16S.B.ALL data set by Mirarab et al. (2012), which consists of a multiple sequence alignment (MSA) of 13,822 bacterial SSU rRNA sequences from the Gutell Comparative RNA Website (CRW) (Cannone et al. 2002), alongside 138,210 fragmentary sequences originally included in the CRW alignment but ungapped and artificially truncated. In Katoh and Standley (2013), we utilized a subset (13,821 fragmentary sequences) prepared by Mirarab et a
NOTE.—The estimated alignments were compared with the CRW alignment to measure accuracy (the number of correctly aligned letters/the number of aligned letters in the CRW alignment). Calculations were performed on a Linux PC with a 2.67 GHz Intel Xeon E7-8837 and 256 GB RAM (for the case marked with superscript alphabet “b”) or on a Linux PC with a 3.47 GHz Intel Xeon X5690 and 48 GB RAM (for the other cases).
In Case 1, there were 13,822 sequences in the existing alignment, resulting in 13,821 fragments. Case 2 had 1,000 sequences in the existing alignment, leading to 138,210 fragments. Case 3 also had 13,822 sequences in the existing alignment, resulting in 138,210 fragments. Wall-clock time was measured with 10 cores, and the command-line argument for parallel processing was set to ––thread 10. Full command-line options included: mafft ––localpair ––weighti 0 ––add frags existingmsa. The accuracy of each resulting multiple sequence alignment (MSA) was evaluated by comparing it with the original CRW alignment. CPU time and wall-clock time for each method were also listed.
Since the sequences in this dataset are highly conserved, the difference in accuracy between the default method (––multipair ––addfragments) and the faster option (––6merpair ––addfragments) is minimal. The trade-off between accuracy and speed does not apply here. The use of a computationally expensive method based on L-INS-1 (––localpair ––add) does not offer an advantage, as the extra computational time is spent on comparing non-overlapping fragmentary sequences, which do not yield reasonable solutions.
The results of the second type of misuse of profile alignment are shown in the last lines of the table, where the given alignment is converted to a profile and each new sequence is aligned to it separately. This indicates that the application of profile alignment should also be avoided in this case. Users need not worry excessively about this misuse, as this calculation is disabled in MAFFT unless the user modifies the code or writes a wrapper script.
The last two lines demonstrate the performance of the fast option (––6merpair ––addfragments) for a larger number (138,210) of fragmentary sequences. The existing alignment included 1,000 and 13,822 sequences in cases 2 and 3, respectively. This fast option provides reasonable quality results within acceptable computing time. Currently, the default option (––multipair ––addfragments) cannot handle cases 2 and 3. Simulation-based benchmarks in Katoh and Frith (2012) suggested that for cases with more divergent sequences, the accuracy of the default option is higher than that of the fast option. I
In the case of nucleotide alignments, if some input sequences have an incorrect direction relative to the other sequences, the directions can be automatically adjusted by the ––adjustdirection option. We use an algorithm with a time complexity of O(n²), where n is the number of sequences (Katoh and Standley 2013). It is slow when distances are calculated with dynamic programming. However, when distances are rapidly calculated based on the number of shared 6-mers, the speed is reasonable. This option is also available on the web version, with the “Adjust direction” button. MAFFT cannot handle more complicated sequences with genomic rearrangements (translocations, duplications, or inversions). The web version of MAFFT displays dot plots between the first sequence and the remaining sequences, using the LAST local alignment program (Kielbasa et al. 2011), for every nucleotide alignment run. By viewing the dot plots, a user can easily check for genomic rearrangements and the directions of input sequences. See Katoh and Standley (2013) for details and examples.
MAFFT version 7 has several enhancements in the flexibility of input and output. The following options related to input and output are available and can be combined with other options:
Users can check the guide tree by using the ––treeout option. In the case of ––addfragments, the estimated phylogenetic positions of new sequences are shown together with the estimated tree of the existing alignment. The alignment calculation is performed based on this phylogenetic estimation. It is also possible to compute such phylogenetic information only, without alignment, by the ––retree 0 option. An example of output is shown in the referenced figure. Note that this phylogenetic information is roughly estimated before the MSA calculation, not based on the MSA. Especially with the fast option, ––6merpair, the estimation is very rough. With the ––multipair option (default), the estimation is expected to be better, but it requires a relatively long computational time. For more rigorous estimation of phylogenetic positions of new sequences, specially designed tools, such as pplacer (Matsen et al. 2010), PaPaRa (Berger and Stamatakis 2011), PAGAN (Löytynoja et al. 2012), SEPP (Mirarab et al. 2012), or combinations of them including MAFFT, should be tried.
For amino acid alignment, MAFFT uses the BLOSUM62 matrix by default. For nucleotide alignment, a 200PAM log-odds scoring matrix i
JTT 1PAM (Jones et al. 1992) with weaker gap penalties than the default significantly improved benchmark scores. Despite this observation, we consistently used the default parameters in the benchmark in Katoh and Frith (2012), as arbitrarily adjusting parameters to fit a simulation setting does not make sense. This suggests that the current default parameters of MAFFT might not be suitable for aligning closely related sequences, though this needs to be verified with actual biological sequences. Users can select different scoring matrices besides the default. For amino acid alignment, ––bl45, ––bl62, ––bl80, ––jtt N, and ––tm N are acceptable, where N represents the expected evolutionary distance among input sequences. The ––bl, ––jtt, and ––tm options refer to BLOSUM (Henikoff S and Henikoff JG 1992), JTT (Jones et al. 1992), and a transmembrane model (Jones et al. 1994), respectively. A user-defined scoring matrix can also be accepted using ––aamatrix. For nucleotide alignments, ––kimura N is available, where N indicates the expected evolutionary distance among input sequences. Gap penalties can be adjusted with ––op, ––exp, ––lop, and ––lexp options. One potential extension is to use different scoring matrices and gap penalties for different sequence pairs based on their divergence level, similar to ClustalW (Thompson et al. 1994). Further studies using actual sequence data are necessary before implementing this extension, and it will also be important to adjust gap penalties based on a realistic evolutionary model of insertions and deletions.
Use of Structural Information: We have discussed possible improvements in MSAs of closely related sequences in the previous section. However, MSA of distantly related sequences remains a challenging problem.
Figure 3: (A) A part of the output of the ––treeout option shows the phylogenetic positions of new sequences (new#) in the tree of the existing alignment (backbone#), estimated before the alignment calculation. This file also includes a Newick format tree of the existing alignment (not shown in this figure). For each new sequence, the nearest sequence in the existing alignment (nearest sequence), approximate distance to the nearest sequence (approximate distance), and the members of the sister group (sister group) are presented. (B) A graphical representation of (A).
Test Case 3: PIN Domain: Figure 4 illustrates a typical limitation of sequence-level alignment for a highly divergent set of three PIN-domain containing proteins: human regnase-1, VPA0982 from Vibrio parahaemolyticus, and the nuclease domain of Taq polymerase from Thermus aquaticus. These proteins share a magnesium-binding site comprised of three conserved aspartic acids. Figure 4A displays a superposition of the three structures (Protein Data Bank identifiers 3v33, 2qip, and 1taq). The middle aspartic acid is represented as a sphere, colored red. In Figure 4B, a typical MSA (by MAFFT-L-INS-i) is shown, wherein the middle aspartic acid position is misaligned. Figure 4C presents a structure-informed MSA (described below), correctly aligning the midd
We discuss our approach to this problem below in the context of integrating MAFFT with the structural alignment program ASH (Standley et al. 2004, 2007). On the technical level, structural information complicates matters because protein structures contain more information and noise than sequence information. Here, we focus on one essential feature of ASH: the equivalence score used to define structural similarity. A particular element in the structural similarity matrix takes the form of a Gaussian-shaped function of the inter-residue distance
e
ij
=exp(−(
d
0
d
ij
)
2
), where
d
ij
is the distance between two alpha carbons
i and
j in the two input structures and
d
0
is a parameter that defines tolerance in the score. The default behavior is to set
d
0
to 4 Å. The goal of ASH is to maximize the sum of
e
ij
over aligned residues. The residue-level equivalences, which form the basis of all ASH alignments, provide a convenient route for combining MAFFT and ASH. We can, for example, set a threshold value of
e
ij
and incorporate highly confident parts of the alignment into MAFFT to “seed” the MSA calculation.
If we consider the case of the three PIN domain-containing structures, we can first compute structural alignments for the three unique pairs using ASH (ash_3v33A-2qipA, ash_3v33A-1taqA, and ash_2qipA-1taqA). If we set a threshold for residue equivalence at 0.5, we can then combine the equivalence-filtered alignments into MAFFT using the seed option: mafft-linsi --seed ash_3v33A-2qipA --seed ash_3v33A-1taqA --seed ash_2qipA-1taqA sequences > output. Because the sequence identities between the aligned structures are low, we see an improvement in the resulting MSA relative to conventional MAFFT. Based on this approach, we are developing an integrative service for protein structure-informed MSA construction.
mafft-linsi --seed ash_3v33A-2qipA --seed ash_3v33A-1taqA --seed ash_2qipA-1taqA sequences > output
Acknowledgments: The authors thank Drs. Wen Chen, C. André Lévesque, and Christopher Lewis, Agriculture and Agri-Food Canada, for permitting the use of the ITS data in this article and providing other challenging problems. This work was supported by the Platform for Drug Discovery, Informatics, and Structural Life Science from the Ministry of Education, Culture, Sports, Science and Technology, Japan, and the Computational Biology Research Center, National Institute of Advanced Industrial Science and Technology (AIST), Japan.
Figure 4 describes a superposition of three protein structures (3v33, 2qip, and 1taq) visualized using PyMOL. Additionally, the MAFFT-L-INS-i sequence alignment is displayed, highlighting misaligned residues in red. The structure-informed MSA shows correctly aligned residues, with alpha helices depicted in blue and beta sheets in yellow.
References: Altschul SF. 1998. Generalized affine gap costs for protein sequence alignment. Proteins 32:88–96. Barton GJ, Sternberg MJ. 1987. A strategy for the rapid multiple alignment of protein sequences. Confidence levels from tertiary structure comparisons. J Mol Biol.
Cole JR, Wang Q, Cardenas E, et al. 2009. The ribosomal database project: improved alignments and new tools for rRNA analysis. Nucleic Acids Res. 37
–D145. Dessimoz C, Gil M. 2010. Phylogenetic assessment of alignments reveals neglected tree signal in gaps. Genome Biol. 11
. Feng DF, Doolittle RF. 1987. Progressive sequence alignment as a prerequisite to correct phylogenetic trees. J Mol Evol. 25:351–360. Fletcher W, Yang Z. 2009. INDELible: a flexible simulator of biological sequence evolution. Mol Biol Evol. 26:1879–1888. Golubchik T, Wise MJ, Easteal S, Jermiin LS. 2007. Mind the gaps: evidence of bias in estimates of multiple sequence alignments. Mol Biol Evol. 24:2433–2442. Gotoh O. 1993. Optimal alignment between groups of sequences and its application to multiple sequence alignment. Comput Appl Biosci. 9:361–370. Gotoh O. 1995. A weighting system and algorithm for aligning many phylogenetically related sequences. Comput Appl Biosci. 11:543–551. Henikoff S, Henikoff JG. 1992. Amino acid substitution matrices from protein blocks. Proc Natl Acad Sci U S A. 89:10915–10919. Higgins DG, Sharp PM. 1988. CLUSTAL: a package for performing multiple sequence alignment on a microcomputer. Gene 73:237–244. Jones DT, Taylor WR, Thornton JM. 1992. The rapid generation of mutation data matrices from protein sequences. Comput Appl Biosci. 8:275–282. Jones DT, Taylor WR, Thornton JM. 1994. A mutation data matrix for transmembrane proteins. FEBS Lett. 339:269–275. Katoh K, Asimenos G, Toh H. 2009. Multiple alignment of DNA sequences with MAFFT. Methods Mol Biol. 537:39–64. Katoh K, Frith MC. 2012. Adding unaligned sequences into an existing alignment using MAFFT and LAST. Bioinformatics 28:3144–3146. Katoh K, Kuma K, Toh H, Miyata T. 2005. MAFFT version 5: improvement in accuracy of multiple sequence alignment. Nucleic Acids Res. 33:511–518. Katoh K, Misawa K, Kuma K, Miyata T. 2002. MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform. Nucleic Acids Res. 30:3059–3066. Katoh K, Standley DM. Forthcoming 2013. MAFFT: iterative refinement and additional methods. Methods Mol Biol. Katoh K, Toh H. 2007. PartTree: An algorithm to build an approximate tree from a large number of unaligned sequences. Bioinformatics 23:372–374. Katoh K, Toh H. 2008a. Improved accuracy of multiple ncRNA alignment by incorporating structural information into a MAFFT-based framework. BMC Bioinformatics 9:212. Katoh K, Toh H. 2008b. Recent developments in the MAFFT multiple sequence alignment program. Brief Bioinform. 9:286–298. Katoh K
Nuin PA, Wang Z, Tillier ER. 2006. The accuracy of several multiple sequence alignment programs for proteins. BMC Bioinformatics 7:471. O’Sullivan O, Suhre K, Abergel C, Higgins DG, Notredame C. 2004. 3DCoffee: combining protein sequences and structures within multiple sequence alignments. J Mol Biol. 340:385–395. Pei J, Kim BH, Grishin NV. 2008. PROMALS3D: a tool for multiple protein sequence and structure alignments. Nucleic Acids Res. 36:2295–2300. Punta M, Coggill PC, Eberhardt RY, et al. (16 co-authors). 2012. The Pfam protein families database. Nucleic Acids Res. 40
–D301. Sahraeian SM, Yoon BJ. 2011. PicXAA-R: efficient structural alignment of multiple RNA sequences using a greedy approach. BMC Bioinformatics 12
. Schrödinger LLC. 2010. The PyMOL Molecular Graphics System, Version 1.3r1. Portland, Oregon: Schrödinger, LLC. Sievers F, Wilm A, Dineen D, et al. (12 co-authors). 2011. Fast scalable generation of high-quality protein multiple sequence alignments using Clustal Omega. Mol Syst Biol. 7:539. Sigrist CJ, Cerutti L, de Castro E, Langendijk-Genevaux PS, Bulliard V, Bairoch A, Hulo N. 2010. PROSITE, a protein domain database for functional characterization and annotation. Nucleic Acids Res. 38
–D166. Standley D, Toh H, Nakamura H. 2007. Ash structure alignment package: sensitivity and selectivity in domain classification. BMC Bioinformatics 8:116. Standley DM, Toh H, Nakamura H. 2004. Detecting local structural similarity in proteins by maximizing the number of equivalent residues. Proteins 57:381–391. Sun H, Buhler JD. 2012. PhyLAT: a phylogenetic local alignment tool. Bioinformatics 28:1336–1344. Tabei Y, Kiryu H, Kin T, Asai K. 2008. A fast structural multiple alignment method for long RNA sequences. BMC Bioinformatics 9:33. Thompson JD, Higgins DG, Gibson TJ. 1994. CLUSTAL W: improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties, and weight matrix choice. Nucleic Acids Res. 22:4673–4680. Waterhouse AM, Procter JB, Martin DM, Clamp M, Barton GJ. 2009. Jalview version 2—a multiple sequence alignment editor and analysis workbench. Bioinformatics 25:1189–1191.
